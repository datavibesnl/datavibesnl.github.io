"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3800],{3115:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var t=n(4848),i=n(8453);const r={},a="3.3 Writing to Tables (Hands On)",o={id:"Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.3 Writing to Tables Hands On",title:"3.3 Writing to Tables (Hands On)",description:"- [ ] In this notebook, we are going to explore SQL syntax to insert and update records in Delta Tables",source:"@site/docs/Databricks Certified Data Engineer Associate - Preparation/3. ELT with Spark SQL and Python/3.3 Writing to Tables Hands On.md",sourceDirName:"Databricks Certified Data Engineer Associate - Preparation/3. ELT with Spark SQL and Python",slug:"/Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.3 Writing to Tables Hands On",permalink:"/docs/Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.3 Writing to Tables Hands On",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"3.2 Query Files (Hands On)",permalink:"/docs/Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.2 Query Files Hands On"},next:{title:"3.4 Advanced Transformations (HandsOn)",permalink:"/docs/Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.4 Advanced Transformations Hands On"}},d={},l=[{value:"Benefits of overwriting tables instead of deleting",id:"benefits-of-overwriting-tables-instead-of-deleting",level:2},{value:"How to overwrite existing tables",id:"how-to-overwrite-existing-tables",level:2},{value:"Overwrite tables with <strong><code>CREATE OR REPLACE</code></strong>",id:"overwrite-tables-with-create-or-replace",level:3},{value:"Overwrite tables with <strong><code>INSERT OVERWRITE</code></strong>",id:"overwrite-tables-with-insert-overwrite",level:3},{value:"How to add records to an existing table",id:"how-to-add-records-to-an-existing-table",level:2},{value:"How to prevent the same records from being inserted with <strong><code>MERGE</code></strong>",id:"how-to-prevent-the-same-records-from-being-inserted-with-merge",level:2},{value:"How to avoid duplicates when inserting records with <strong><code>MERGE</code></strong>",id:"how-to-avoid-duplicates-when-inserting-records-with-merge",level:2},{value:"Create a temporary view from CSV files",id:"create-a-temporary-view-from-csv-files",level:3},{value:"Update delta table from temporary view",id:"update-delta-table-from-temporary-view",level:3}];function c(e){const s={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"33-writing-to-tables-hands-on",children:"3.3 Writing to Tables (Hands On)"}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","In this notebook, we are going to explore SQL syntax to insert and update records in Delta Tables"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"Remember Delta technology provides ACID compliant updates to Delta tables"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We will continue working with our bookstore dataset. Let us first run our helping notebook to copy the dataset"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:"%run ../Includes/Copy-Datasets\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We will use a ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CTAS"})})," statement to create orders delta table as ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"SELECT"})})," statement from parquet files"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE orders AS\nSELECT * FROM parquet.`${dataset.bookstore}/orders`\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","As you can see, parquet files have a well-defined schema, so we managed to extract the data correctly"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM orders\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","When writing to tables, we could be interested by completely overwriting the data in the table"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"benefits-of-overwriting-tables-instead-of-deleting",children:"Benefits of overwriting tables instead of deleting"}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","There are multiple benefits to overwriting tables instead of deleting and recreating tables"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"For example, the old version of the table still exists and can easily retrieve all data using Time Travel"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Overwriting a table is much faster because it does not need to list the directory recursively or delete any files",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Concurrent queries can still read the table while you are overwriting it"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"Due to the ACID transaction guarantees, if overwriting the table fails, the table will be in its previous state"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"how-to-overwrite-existing-tables",children:"How to overwrite existing tables"}),"\n",(0,t.jsxs)(s.h3,{id:"overwrite-tables-with-create-or-replace",children:["Overwrite tables with ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CREATE OR REPLACE"})})]}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","The first method to accomplish complete overwrite is to use ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CREATE OR REPLACE TABLE"})})]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"CREATE OR REPLACE TABLE orders AS\nSELECT * FROM parquet.`${dataset.bookstore}/orders`\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CREATE OR REPLACE TABLE"})})," statements fully replace the content of a table each time they execute",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Let us now check our table history"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"DESCRIBE HISTORY orders\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","As you can see, the version ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"0"})})," is a ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CREATE TABLE AS SELECT"})})," statement. While ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CREATE OR REPLACE"})})," statement has generated a new table version"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"overwrite-tables-with-insert-overwrite",children:["Overwrite tables with ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT OVERWRITE"})})]}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","The second method to overwrite table data is to use ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT OVERWRITE"})})," statement. It provide a nearly identical output as above"]}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"INSERT OVERWRITE orders\nSELECT * FROM parquet.`${dataset.bookstore}/orders`\n"})}),(0,t.jsx)(s.p,{children:"It means data in the target table will be replaced by data from the query"})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT OVERWRITE"})})," statement has some differences"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:["For example, it can only overwrite an existing table and not creating a new one like our ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CREATE OR REPLACE"})})," statement"]})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","It can override only the new records that match the current table schema, which means that it is a safer technique for overwriting an existing table without the risk of modifying the table schema"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"INSERT OVERWRITE orders\nSELECT * FROM parquet.`${dataset.bookstore}/orders`\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We can see our table history"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"DESCRIBE HISTORY orders\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","As you can see here, the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT OVERWRITE"})})," operation has been recorded as a new version in the table as WRITE operation",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","If you try to insert overwrite the data with different schema, for example, here we are adding a new column of the data for the current timestamp",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(s.admonition,{type:"warning",children:[(0,t.jsx)(s.p,{children:"By running this command, we see that it generates an exception"}),(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"INSERT OVERWRITE orders\nSELECT *, current_timestamp() \nFROM parquet.`${dataset.bookstore}/orders`\n"})}),(0,t.jsx)(s.p,{children:"The exception says a schema mismatch detected when writing to the Delta table"})]})]}),"\n",(0,t.jsx)(s.admonition,{type:"tip",children:(0,t.jsxs)(s.p,{children:["The way how they enforce schema on-write is the primary difference between ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT OVERWRITE"})})," and ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"CREATE OR REPLACE TABLE"})})," statements"]})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"how-to-add-records-to-an-existing-table",children:"How to add records to an existing table"}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Let us now talk about appending records to tables. The easiest method is to use ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT INTO"})})," statement",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Here we are inserting a new data using an input query that query the parquet files in the orders-new directory",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We have successfully added 700 new records to our table. And we can check the new number of orders"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"INSERT INTO orders\nSELECT * FROM parquet.`${dataset.bookstore}/orders-new`\n"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.h2,{id:"how-to-prevent-the-same-records-from-being-inserted-with-merge",children:["How to prevent the same records from being inserted with ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})]}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","The ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT INTO"})})," statement is a simple and efficient operation for inserting new data. However, it does not have any built in guarantees to prevent inserting the same records multiple times"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"It means re-executing the query will write the same records to the target table resulting in duplicate records"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","To resolve this issue, we can use our second method, which is ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," INTO statement",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","With the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," statement, you can ",(0,t.jsx)(s.em,{children:"upsert"})," data from a source table, view, or dataframe into the target data table"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:["It means you can insert, update and delete using the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," INTO statements"]})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Here we will use the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," operation to update the customer data with updated emails and adding new customers",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We are creating a temporary view of the new customer data"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",metastring:"{1-2}",children:"CREATE OR REPLACE TEMP VIEW customers_updates AS\nSELECT * FROM json.`${dataset.bookstore}/customers-json-new`;\n\nMERGE INTO customers c\nUSING customers_updates u\nON c.customer_id = u.customer_id\nWHEN MATCHED AND c.email and u.email IS NOT NULL THEN\n    UPDATE SET email = u.email, updated = u.updated\nWHEN NOT MATCHED THEN INSERT *\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We can apply the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," operation that says ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE INTO"})})," customers the new changes coming from ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"customer_updates"})})," ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"TEMP VIEW"})})," on the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"customer_id"})})," key"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",metastring:"{4-6}",children:"CREATE OR REPLACE TEMP VIEW customers_updates AS\nSELECT * FROM json.`${dataset.bookstore}/customers-json-new`;\n\nMERGE INTO customers c\nUSING customers_updates u\nON c.customer_id = u.customer_id\nWHEN MATCHED AND c.email and u.email IS NOT NULL THEN\n    UPDATE SET email = u.email, updated = u.updated\nWHEN NOT MATCHED THEN INSERT *\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We have two actions here. When ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MATCH"})}),", we do an ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"UPDATE"})})," and when ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"NOT MATCH"})}),", we do an ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"INSERT"})}),". In addition, we add extra conditions",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","In this case, we are checking that the current row has a ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"NULL"})})," email while the new record does not. In such a case, we ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"UPDATE"})})," the email and we also update the last ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"updated"})})," timestamp",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","If the new record does not match any existing customers based on the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"customer_id"})}),", in this case, we will insert this new record."]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",metastring:"{7-9}",children:"CREATE OR REPLACE TEMP VIEW customers_updates AS\nSELECT * FROM json.`${dataset.bookstore}/customers-json-new`;\n\nMERGE INTO customers c\nUSING customers_updates u\nON c.customer_id = u.customer_id\nWHEN MATCHED AND c.email and u.email IS NOT NULL THEN\n    UPDATE SET email = u.email, updated = u.updated\nWHEN NOT MATCHED THEN INSERT *\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","As we can see here, we have updated 100 records and we have inserted 201 records. And no records have been deleted"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.h2,{id:"how-to-avoid-duplicates-when-inserting-records-with-merge",children:["How to avoid duplicates when inserting records with ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})]}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","In a ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," operation, updates, inserts and deletes are completed in a single atomic transaction",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," operation is a great solution for avoiding duplicates when inserting records"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"create-a-temporary-view-from-csv-files",children:"Create a temporary view from CSV files"}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Let us see another example. Here we have new books to be inserted and they are coming in CSV Format",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We will create this temporary view (",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"TEMP VIEW"})}),") against this new data"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",metastring:"{1-12}",children:'CREATE OR REPLACE TEMP VIEW books_updates (\n    book_id STRING,\n    title STRING,\n    author STRING,\n    category STRING,\n    price DOUBLE\n) USING CSV\nOPTIONS (\n    path="${dataset.bookstore}/books-csv-new",\n    header="true",\n    delimiter=";"\n);\n\nSELECT * FROM books_updates\n'})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Here we have first new books and we are only interested by inserting the computer science books in our database"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"update-delta-table-from-temporary-view",children:"Update delta table from temporary view"}),"\n",(0,t.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Let us now use the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE INTO"})})," statement to update the table books with the data coming from the temporary view books_updates",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We can use the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE INTO"})})," statement where we provide only the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"NOT MATCH"})})," condition"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"It means we are only inserting new data if they are not already exist based on our key, which is the book_id and the title"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","We are specifying the category of the new record to be inserted is only Computer Science"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"**`MERGE`** INTO books b\nUSING books_updates u\nON b.book_id = u.book_id AND b.title = u.title\nWHEN NOT MATCHED AND u.category = 'Computer Science' THEN\n    INSERT *\n"})})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","As expected, we are only inserting three new records, which are the 3 computer science books",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","One of the main benefits of the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"MERGE"})})," operation is to avoid duplicate",(0,t.jsx)("br",{})]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{className:"task-list-item",children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.input,{type:"checkbox",disabled:!0})," ","If we try to rerun this statement, it will not re-insert those records as they are already on the table"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var t=n(6540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);