"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[924],{3225:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=s(4848),t=s(8453);const r={},a="3.5 Higher Order Functions and SQL UDFs",o={id:"Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.5 Higher Order Functions and SQL UDFs",title:"3.5 Higher Order Functions and SQL UDFs",description:"Introduction",source:"@site/docs/Databricks Certified Data Engineer Associate - Preparation/3. ELT with Spark SQL and Python/3.5 Higher Order Functions and SQL UDFs.md",sourceDirName:"Databricks Certified Data Engineer Associate - Preparation/3. ELT with Spark SQL and Python",slug:"/Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.5 Higher Order Functions and SQL UDFs",permalink:"/docs/Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.5 Higher Order Functions and SQL UDFs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"3.4 Advanced Transformations (HandsOn)",permalink:"/docs/Databricks Certified Data Engineer Associate - Preparation/ELT with Spark SQL and Python/3.4 Advanced Transformations Hands On"},next:{title:"4.1 Structured Streaming",permalink:"/docs/Databricks Certified Data Engineer Associate - Preparation/Incremental Data Processing/4.1 Structured Streaming"}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Dataset setup",id:"dataset-setup",level:2},{value:"What are Higher Order Functions?",id:"what-are-higher-order-functions",level:2},{value:"How to use higher order functions?",id:"how-to-use-higher-order-functions",level:2},{value:"Use the <strong><code>filter</code></strong> function to filter an array based on a condition",id:"use-the-filter-function-to-filter-an-array-based-on-a-condition",level:3},{value:"Use the <strong><code>transform</code></strong> function to apply transformations to every single item in an array",id:"use-the-transform-function-to-apply-transformations-to-every-single-item-in-an-array",level:3},{value:"How to create user-defined functions (UDFs)?",id:"how-to-create-user-defined-functions-udfs",level:2},{value:"How to use UDF functions",id:"how-to-use-udf-functions",level:2},{value:"How to add more complex logic in UDF functions",id:"how-to-add-more-complex-logic-in-udf-functions",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"35-higher-order-functions-and-sql-udfs",children:"3.5 Higher Order Functions and SQL UDFs"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","In this notebook, we will explore higher order functions and user-defined functions also known as UDF",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","We will continue using our bookstore dataset, which contains the 3 tables of customers, orders and books"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"dataset-setup",children:"Dataset setup"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Let us start by copying this dataset"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"%run ../Includes/Copy-Datasets\n"})})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Let us take a look again on our orders table"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM orders\n"})})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","As you can see here, the books column is of complex data type",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["In fact, it's an array of a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"struct"})})," type"]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","To work directly with such a complex datatype",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","We need to use higher order functions"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-are-higher-order-functions",children:"What are Higher Order Functions?"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Higher order functions allow you to work directly with hierarchical data like arrays and map type objects"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-higher-order-functions",children:"How to use higher order functions?"}),"\n",(0,i.jsxs)(n.h3,{id:"use-the-filter-function-to-filter-an-array-based-on-a-condition",children:["Use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"filter"})})," function to filter an array based on a condition"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","One of the most common higher order functions is the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"filter"})})," function which filters an array using a given ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"lambda"})})," function",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","In this example, we are creating a new column called ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"multiple_copies"})}),", where we filter the books column to extract only those books that have a quantity greater or equal to 2"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"It means they have been bought in multiple copies, 2 or more"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","We are creating a new column called ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"multiple_copies"})}),", where we have an array that contains only the filtered data"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:"{4}",children:"SELECT \r\n    order_id, \r\n    books,\r\n    FILTER(books, i -> i.quantity >= 2) AS multiple_copies\r\nFROM orders\r\n\n"})})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","As you can see, we are creating a lot of empty array in this new column",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","In this case, it is useful to use a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"WHERE"})})," clause to show only non-empty array values in the return column",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","We can accomplish that by using a subquery, which is a query within another query in order to apply the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"WHERE"})})," clause on the size of the returned column"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:"{6}",children:"SELECT \r\n    order_id, \r\n    books,\r\n    FILTER(books, i -> i.quantity >= 2) AS multiple_copies\r\nFROM orders\r\nWHERE size(multiple_copies) > 0;\n"})})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"use-the-transform-function-to-apply-transformations-to-every-single-item-in-an-array",children:["Use the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"transform"})})," function to apply transformations to every single item in an array"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Our second higher order function is the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"transform"})})," function that is used to apply a transformation on all the items in an array and extract the transformed value",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","In this example, for each book in the books array, we are applying a discount on the subtotal value"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:"{4-7}",children:"SELECT\r\n    order_id,\r\n    books,\r\n    TRANSFORM (\r\n        books, \r\n        b -> CAST(b.subtotal * 0.8 AS INT)\r\n    ) AS subtotal_after_discount\r\nFROM orders;\n"})})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","As you can see, we created a new column containing an array of the transformed values for each element in the books array"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-create-user-defined-functions-udfs",children:"How to create user-defined functions (UDFs)?"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Let us now talk about user-defined functions or UDFs, which allow you to register a custom combination of SQL logic as function in a database, making these methods reusable in any SQL query",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","UDF functions leverage Spark SQL directly maintaining all the optimization of Spark when applying your custom logic to large datasets",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Here is an example of creating a user-defined function. At minimum, it requires a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"function name"})}),", ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"optional"})})," parameters, the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"type"})})," to be returned, and some ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"custom logic"})})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:"{1-4}",children:'CREATE OR REPLACE FUNCTION get_url(\r\n    email STRING\r\n)\r\nRETURNS STRING\r\n\r\nRETURN CONCAT("https://www.", split(email, "@")[1])\n'})})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Our function here is named ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"get_url"})}),", that accepts an ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"email"})})," address as an argument and return a value of type ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"STRING"})}),". Here we are splitting the email into two parts based on the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"@"})})," sign"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:"{6}",children:'CREATE OR REPLACE FUNCTION get_url(\r\n    email STRING\r\n)\r\nRETURNS STRING\r\n\r\nRETURN CONCAT("https://www.", split(email, "@")[1])\n'})})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-udf-functions",children:"How to use UDF functions"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Let us now start to using it. Here we are applying our UDF on the customer emails to get the URL address"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT \r\n    email,\r\n    get_url(email) AS domain\r\nFROM customers\n"})})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"User defined functions are permanent objects that are persisted to the database, so you can use them between different Spark Sessions and Notebooks"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","With ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"DESCRIBE FUNCTION"})})," command, we can see where it was registered and basic information about expected inputs and the expected return type"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"DESCRIBE FUNCTION get_url\n"})})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","As you can see our function, it belongs to the default database and accept the email address as a string input, and return a string value",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","We can get even more information by running ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"DESCRIBE FUNCTION EXTENDED"})})]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"DESCRIBE FUNCTION EXTENDED get_url\n"})}),(0,i.jsx)(n.p,{children:"For example, the Body field at the bottom shows the SQL logic used in the function itself"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-add-more-complex-logic-in-udf-functions",children:"How to add more complex logic in UDF functions"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","We can have more complex logic in our function. For example, here we are applying the standard SQL ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"CASE WHEN"})})," statements in order to evaluate multiple condition statements within our function",(0,i.jsx)("br",{})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Here, for example, we are checking the email extension using the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"LIKE"})})," command in order to detect the category of the domain name and otherwise, we are reporting it as unknown extension"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",metastring:"{3-10}",children:'CREATE FUNCTION site_type(email STRING)\r\nRETURNS STRING\r\nRETURN CASE\r\n    WHEN email LIKE "%.com" THEN "Commerical business"\r\n    WHEN email LIKE "%.org" THEN "Non-profit organizations"\r\n    WHEN email LIKE "%.edu" THEN "Educational institution"\r\n    ELSE CONCAT(\r\n        "Unknown extension for domain: ", \r\n        SPLIT(email, "@")[1]\r\n    )\r\nEND;\r\n\r\nSELECT \r\n    email, \r\n    site_type(email) as domain_category\r\nFROM customers;\n'})})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","As you can see UDF functions are really powerful",(0,i.jsx)("br",{})]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);